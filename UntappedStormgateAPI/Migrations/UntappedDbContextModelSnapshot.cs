// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UntappedAPI.DataUtility;

#nullable disable

namespace UntappedAPI.Migrations
{
    [DbContext(typeof(UntappedDbContext))]
    partial class UntappedDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UntappedAPI.Models.PlayerSnapshot", b =>
                {
                    b.Property<string>("PlayerSnapshotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CuratedStatsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastSnapshot")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlayerSnapshotId");

                    b.HasIndex("CuratedStatsId");

                    b.HasIndex("ProfileId");

                    b.ToTable("PlayerSnapshot");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Celestials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("League")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("Mmr")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("Ties")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Celestials");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Infernals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("League")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("Mmr")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("Ties")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Infernals");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.MatchHistoryVisibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("RANKED_1V1")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MatchHistoryVisibility");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.All", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CelestialsId")
                        .HasColumnType("int");

                    b.Property<int>("InfernalsId")
                        .HasColumnType("int");

                    b.Property<int>("VanguardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CelestialsId");

                    b.HasIndex("InfernalsId");

                    b.HasIndex("VanguardId");

                    b.ToTable("All");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.CelestialsPlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Recent_mmr_history")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CelestialsPlayerStats");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.CuratedStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllId");

                    b.ToTable("CuratedStats");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.InfernalsPlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Recent_mmr_history")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InfernalsPlayerStats");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.Outcomes_By_Opponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CelestialsPlayerStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("InfernalsPlayerStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("VanguardPlayerStatsId")
                        .HasColumnType("int");

                    b.Property<int>("losses")
                        .HasColumnType("int");

                    b.Property<string>("player_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ties")
                        .HasColumnType("int");

                    b.Property<int>("wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CelestialsPlayerStatsId");

                    b.HasIndex("InfernalsPlayerStatsId");

                    b.HasIndex("VanguardPlayerStatsId");

                    b.ToTable("Outcomes_By_Opponent");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.VanguardPlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Recent_mmr_history")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VanguardPlayerStats");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Profile", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MatchHistoryVisibilityId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RanksId")
                        .HasColumnType("int");

                    b.Property<int>("ReplayVisibilityId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("MatchHistoryVisibilityId");

                    b.HasIndex("RanksId");

                    b.HasIndex("ReplayVisibilityId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Ranked1v1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CelestialsId")
                        .HasColumnType("int");

                    b.Property<int>("InfernalsId")
                        .HasColumnType("int");

                    b.Property<int>("VanguardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CelestialsId");

                    b.HasIndex("InfernalsId");

                    b.HasIndex("VanguardId");

                    b.ToTable("Ranked1v1");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Ranks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ranked1v1Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Ranked1v1Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.ReplayVisibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("RANKED_1V1")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ReplayVisibility");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Vanguard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("League")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("Mmr")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("Ties")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vanguard");
                });

            modelBuilder.Entity("UntappedAPI.Models.PlayerSnapshot", b =>
                {
                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.CuratedStats", "CuratedStats")
                        .WithMany()
                        .HasForeignKey("CuratedStatsId");

                    b.HasOne("UntappedAPI.Models.Untapped.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("CuratedStats");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.All", b =>
                {
                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.CelestialsPlayerStats", "Celestials")
                        .WithMany()
                        .HasForeignKey("CelestialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.InfernalsPlayerStats", "Infernals")
                        .WithMany()
                        .HasForeignKey("InfernalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.VanguardPlayerStats", "Vanguard")
                        .WithMany()
                        .HasForeignKey("VanguardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Celestials");

                    b.Navigation("Infernals");

                    b.Navigation("Vanguard");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.CuratedStats", b =>
                {
                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.All", "All")
                        .WithMany()
                        .HasForeignKey("AllId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("All");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.Outcomes_By_Opponent", b =>
                {
                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.CelestialsPlayerStats", null)
                        .WithMany("outcomes_by_opponent")
                        .HasForeignKey("CelestialsPlayerStatsId");

                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.InfernalsPlayerStats", null)
                        .WithMany("outcomes_by_opponent")
                        .HasForeignKey("InfernalsPlayerStatsId");

                    b.HasOne("UntappedAPI.Models.Untapped.PlayerStats.VanguardPlayerStats", null)
                        .WithMany("outcomes_by_opponent")
                        .HasForeignKey("VanguardPlayerStatsId");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Profile", b =>
                {
                    b.HasOne("UntappedAPI.Models.Untapped.MatchHistoryVisibility", "MatchHistoryVisibility")
                        .WithMany()
                        .HasForeignKey("MatchHistoryVisibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntappedAPI.Models.Untapped.Ranks", "Ranks")
                        .WithMany()
                        .HasForeignKey("RanksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntappedAPI.Models.Untapped.ReplayVisibility", "ReplayVisibility")
                        .WithMany()
                        .HasForeignKey("ReplayVisibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchHistoryVisibility");

                    b.Navigation("Ranks");

                    b.Navigation("ReplayVisibility");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Ranked1v1", b =>
                {
                    b.HasOne("UntappedAPI.Models.Untapped.Celestials", "Celestials")
                        .WithMany()
                        .HasForeignKey("CelestialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntappedAPI.Models.Untapped.Infernals", "Infernals")
                        .WithMany()
                        .HasForeignKey("InfernalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UntappedAPI.Models.Untapped.Vanguard", "Vanguard")
                        .WithMany()
                        .HasForeignKey("VanguardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Celestials");

                    b.Navigation("Infernals");

                    b.Navigation("Vanguard");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.Ranks", b =>
                {
                    b.HasOne("UntappedAPI.Models.Untapped.Ranked1v1", "Ranked1v1")
                        .WithMany()
                        .HasForeignKey("Ranked1v1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranked1v1");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.CelestialsPlayerStats", b =>
                {
                    b.Navigation("outcomes_by_opponent");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.InfernalsPlayerStats", b =>
                {
                    b.Navigation("outcomes_by_opponent");
                });

            modelBuilder.Entity("UntappedAPI.Models.Untapped.PlayerStats.VanguardPlayerStats", b =>
                {
                    b.Navigation("outcomes_by_opponent");
                });
#pragma warning restore 612, 618
        }
    }
}
